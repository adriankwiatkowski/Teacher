import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalTime;
import kotlin.Boolean;

CREATE TABLE term
(
    id         INTEGER           NOT NULL PRIMARY KEY AUTOINCREMENT,
    name       TEXT              NOT NULL,
    start_date TEXT AS LocalDate NOT NULL,
    end_date   TEXT AS LocalDate NOT NULL
);

CREATE TABLE school_year
(
    id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    term_first_id  INTEGER NOT NULL,
    term_second_id INTEGER NOT NULL,
    name           TEXT    NOT NULL,

    FOREIGN KEY (term_first_id) REFERENCES term (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (term_second_id) REFERENCES term (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE school_class
(
    id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    school_year_id INTEGER NOT NULL,
    name           TEXT    NOT NULL,

    FOREIGN KEY (school_year_id) REFERENCES school_year (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE lesson
(
    id              INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    school_class_id INTEGER NOT NULL,
    name            TEXT    NOT NULL,

    FOREIGN KEY (school_class_id) REFERENCES school_class (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE event
(
    id           INTEGER            NOT NULL PRIMARY KEY AUTOINCREMENT,
    lesson_id    INTEGER, -- Nullable reference
    `date`       TEXT AS LocalDate  NOT NULL,
    start_time   TEXT AS LocalTime  NOT NULL,
    end_time     TEXT AS LocalTime  NOT NULL,
    is_cancelled INTEGER AS Boolean NOT NULL,

    FOREIGN KEY (lesson_id) REFERENCES lesson (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE student
(
    id              INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    school_class_id INTEGER NOT NULL,
    register_number INTEGER NOT NULL,
    name            TEXT    NOT NULL,
    surname         TEXT    NOT NULL,
    email           TEXT,
    phone           TEXT,

    FOREIGN KEY (school_class_id) REFERENCES school_class (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Uwaga/notatka
CREATE TABLE student_note
(
    id          INTEGER            NOT NULL PRIMARY KEY AUTOINCREMENT,
    student_id  INTEGER            NOT NULL,
    title       TEXT               NOT NULL,
    description TEXT               NOT NULL,
    is_negative INTEGER AS Boolean NOT NULL, -- Czy uwaga

    FOREIGN KEY (student_id) REFERENCES student (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE grade_template
(
    id            INTEGER            NOT NULL PRIMARY KEY AUTOINCREMENT,
    lesson_id     INTEGER            NOT NULL,
    name          TEXT               NOT NULL,
    description   TEXT,
    `date`        TEXT AS LocalDate  NOT NULL,
    weight        INTEGER            NOT NULL,
    is_first_term INTEGER AS Boolean NOT NULL,

    FOREIGN KEY (lesson_id) REFERENCES lesson (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Punktacja oceny
CREATE TABLE grade_score
(
    id                        INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    grade_template_id         INTEGER NOT NULL,
    two_minus_min_threshold   INTEGER NOT NULL,
    two_min_threshold         INTEGER NOT NULL,
    two_plus_min_threshold    INTEGER NOT NULL,
    three_minus_min_threshold INTEGER NOT NULL,
    three_min_threshold       INTEGER NOT NULL,
    three_plus_min_threshold  INTEGER NOT NULL,
    four_minus_min_threshold  INTEGER NOT NULL,
    four_min_threshold        INTEGER NOT NULL,
    four_plus_min_threshold   INTEGER NOT NULL,
    five_minus_min_threshold  INTEGER NOT NULL,
    five_min_threshold        INTEGER NOT NULL,
    five_plus_min_threshold   INTEGER NOT NULL,
    six_minus_min_threshold   INTEGER NOT NULL,
    six_min_threshold         INTEGER NOT NULL,

    FOREIGN KEY (grade_template_id) REFERENCES grade_template (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE grade
(
    id                INTEGER            NOT NULL PRIMARY KEY AUTOINCREMENT,
    student_id        INTEGER            NOT NULL,
    grade_template_id INTEGER            NOT NULL,
    grade             TEXT AS BigDecimal NOT NULL,
    `date`            TEXT AS LocalDate  NOT NULL,

    FOREIGN KEY (student_id) REFERENCES student (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (grade_template_id) REFERENCES grade_template (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Aktywność +-
CREATE TABLE lesson_activity
(
    id         INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    lesson_id  INTEGER NOT NULL,
    student_id INTEGER NOT NULL,
    sum        INTEGER NOT NULL,

    FOREIGN KEY (lesson_id) REFERENCES lesson (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (student_id) REFERENCES student (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Obecność
CREATE TABLE lesson_attendance
(
    event_id      INTEGER NOT NULL,
    student_id    INTEGER NOT NULL,
    attendance_id INTEGER NOT NULL,

    FOREIGN KEY (event_id) REFERENCES event (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (student_id) REFERENCES student (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (attendance_id) REFERENCES attendance (id) ON DELETE CASCADE ON UPDATE CASCADE,

    PRIMARY KEY (event_id, student_id)
);

-- nb u sp zw ob
CREATE TABLE attendance
(
    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    `text` TEXT    NOT NULL
);

CREATE TABLE lesson_note
(
    id        INTEGER  NOT NULL PRIMARY KEY AUTOINCREMENT,
    lesson_id INTEGER  NOT NULL,
    title     TEXT     NOT NULL,
    text      TEXT     NOT NULL,

    FOREIGN KEY (lesson_id) REFERENCES lesson (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Notatka
CREATE TABLE note
(
    id       INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    title    TEXT    NOT NULL,
    text     TEXT    NOT NULL,
    priority INTEGER NOT NULL
);

INSERT OR FAIL INTO attendance (text) VALUES
    ('nb'),
    ('u'),
    ('sp'),
    ('zw'),
    ('ob');