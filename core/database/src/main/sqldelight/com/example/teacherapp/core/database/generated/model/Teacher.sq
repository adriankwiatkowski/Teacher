import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalTime;
import kotlin.Boolean;

CREATE TABLE term
(
    id         INTEGER           NOT NULL PRIMARY KEY AUTOINCREMENT,
    name       TEXT              NOT NULL,
    start_date TEXT AS LocalDate NOT NULL,
    end_date   TEXT AS LocalDate NOT NULL
);

CREATE TABLE school_year
(
    id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    term_first_id  INTEGER NOT NULL,
    term_second_id INTEGER NOT NULL,
    name           TEXT    NOT NULL,

    FOREIGN KEY (term_first_id) REFERENCES term (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (term_second_id) REFERENCES term (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE school_class
(
    id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    school_year_id INTEGER NOT NULL,
    name           TEXT    NOT NULL,

    FOREIGN KEY (school_year_id) REFERENCES school_year (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE lesson
(
    id              INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    school_class_id INTEGER NOT NULL,
    name            TEXT    NOT NULL,

    FOREIGN KEY (school_class_id) REFERENCES school_class (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE lesson_calendar
(
    id         INTEGER            NOT NULL PRIMARY KEY AUTOINCREMENT,
    lesson_id  INTEGER            NOT NULL,
    `date`     TEXT AS LocalDate  NOT NULL,
    start_time TEXT AS LocalTime  NOT NULL,
    end_time   TEXT AS LocalTime  NOT NULL,
    is_valid   INTEGER AS Boolean NOT NULL,

    FOREIGN KEY (lesson_id) REFERENCES lesson (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE student
(
    id              INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    school_class_id INTEGER NOT NULL,
    order_in_class  INTEGER NOT NULL,
    name            TEXT    NOT NULL,
    surname         TEXT    NOT NULL,
    email           TEXT,
    phone           TEXT,

    FOREIGN KEY (school_class_id) REFERENCES school_class (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Uwaga/notatka
CREATE TABLE student_note
(
    id          INTEGER            NOT NULL PRIMARY KEY AUTOINCREMENT,
    student_id  INTEGER            NOT NULL,
    title       TEXT               NOT NULL,
    description TEXT               NOT NULL,
    is_negative INTEGER AS Boolean NOT NULL, -- Czy uwaga

    FOREIGN KEY (student_id) REFERENCES student (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE grade_template
(
    id          INTEGER           NOT NULL PRIMARY KEY AUTOINCREMENT,
    lesson_id   INTEGER           NOT NULL,
    name        TEXT              NOT NULL,
    description TEXT,
    `date`      TEXT AS LocalDate NOT NULL,
    weight      INTEGER           NOT NULL,

    FOREIGN KEY (lesson_id) REFERENCES lesson (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE grade
(
    id                INTEGER            NOT NULL PRIMARY KEY AUTOINCREMENT,
    student_id        INTEGER            NOT NULL,
    grade_template_id INTEGER            NOT NULL,
    grade             TEXT AS BigDecimal NOT NULL,
    `date`            TEXT AS LocalDate  NOT NULL,

    FOREIGN KEY (student_id) REFERENCES student (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (grade_template_id) REFERENCES grade_template (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Aktywność +-
CREATE TABLE lesson_activity
(
    id         INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    lesson_id  INTEGER NOT NULL,
    student_id INTEGER NOT NULL,
    sum        INTEGER NOT NULL,

    FOREIGN KEY (lesson_id) REFERENCES lesson (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (student_id) REFERENCES student (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Obecność
CREATE TABLE attendance
(
    lesson_calendar_id INTEGER NOT NULL,
    student_id         INTEGER NOT NULL,
    attendance         TEXT    NOT NULL,

    FOREIGN KEY (lesson_calendar_id) REFERENCES lesson_calendar (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (student_id) REFERENCES student (id) ON DELETE CASCADE ON UPDATE CASCADE,

    PRIMARY KEY (lesson_calendar_id, student_id)
);

CREATE TABLE lesson_note
(
    id        INTEGER  NOT NULL PRIMARY KEY AUTOINCREMENT,
    lesson_id INTEGER  NOT NULL,
    title     TEXT     NOT NULL,
    text      TEXT     NOT NULL,

    FOREIGN KEY (lesson_id) REFERENCES lesson (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Notatka
CREATE TABLE note
(
    id       INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    title    TEXT    NOT NULL,
    text     TEXT    NOT NULL,
    priority INTEGER NOT NULL
);

CREATE TABLE password
(
    id       INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    password TEXT    NOT NULL
);